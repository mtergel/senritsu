import {
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalFooter,
  ModalBody,
  ModalCloseButton,
  FormControl,
  FormLabel,
  Input,
  Button,
  Flex,
  Center,
  CircularProgress,
  Heading,
  useToast,
  useColorModeValue,
} from "@chakra-ui/react";
import axios from "axios";
import { useSession } from "next-auth/client";
import { useMemo, useRef, useState } from "react";

interface GeneratePlaylistProps {
  open: boolean;
  onClose: () => void;
  tracks: any[];
}

const GeneratePlaylist: React.FC<GeneratePlaylistProps> = ({
  open,
  onClose,
  tracks,
}) => {
  const tracksUri = useMemo(() => {
    return tracks.map((i) => i.uri);
  }, [tracks]);

  const [session, loading] = useSession();

  const toast = useToast();
  const [sending, setSending] = useState(false);

  const [gpl, setGpl] = useState(false);

  const handleSubmit = async () => {
    try {
      setSending(true);

      setGpl(true);

      const data = await axios.post(
        // @ts-expect-error
        `https://api.spotify.com/v1/users/${session.id}/playlists`,
        {
          name: inputValue === "" || !inputValue ? "Senritsu" : inputValue,
          description: "Playlist generated by Senritsu",
        },
        {
          method: "POST",
          headers: {
            Authorization: "Bearer " + session.accessToken,
          },
        }
      );

      setGpl(false);

      //   console.log(data.data);

      await axios.post(
        `https://api.spotify.com/v1/playlists/${data.data.id}/tracks`,
        {
          uris: tracksUri,
        },
        {
          method: "POST",
          headers: {
            Authorization: "Bearer " + session.accessToken,
            "content-type": "application/json",
          },
        }
      );

      window.open(data.data.external_urls.spotify, "_blank");

      setSending(false);
      setInputValue("");
      onClose();
    } catch (error) {
      setSending(false);
      setGpl(false);
      toast({
        title: "An error occurred.",
        description: "Sorry, try again later",
        status: "error",
        duration: 4500,
        isClosable: true,
        position: "top",
      });
    }
  };

  const ModalBgColor = useColorModeValue("gray.50", "#282828");
  const [inputValue, setInputValue] = useState("");
  return (
    <Modal isOpen={open} onClose={onClose}>
      <ModalOverlay />
      <ModalContent bgColor={ModalBgColor}>
        <ModalHeader>Add a new playlist</ModalHeader>
        <ModalCloseButton />
        <ModalBody pb={6}>
          {sending ? (
            <Flex direction="column">
              <Center>
                <CircularProgress isIndeterminate />
              </Center>
              <Heading size="md" textAlign="center">
                {gpl ? "Making new playlist" : "Adding tracks"}
              </Heading>
            </Flex>
          ) : (
            <FormControl>
              <FormLabel>Name</FormLabel>
              <Input
                placeholder="Playlist name"
                value={inputValue}
                onChange={(event) => setInputValue(event.target.value)}
                focusBorderColor="green.500"
              />
            </FormControl>
          )}
        </ModalBody>

        <ModalFooter>
          <Button
            colorScheme="green"
            mr={3}
            onClick={handleSubmit}
            disabled={sending || inputValue === ""}
          >
            Save
          </Button>
        </ModalFooter>
      </ModalContent>
    </Modal>
  );
};

export default GeneratePlaylist;
